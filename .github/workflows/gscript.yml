name: Label & Comment Issues

on:
  issues:
    types:
      - opened
      - reopened
      - closed
  pull_request:
    types:
      - opened

permissions:
  issues: write         # Permission to modify issues (e.g., add labels, comment)
  pull-requests: write  # Permission to modify pull requests (e.g., add comments)
  contents: read        # Permission to read repository contents, optional but useful for certain operations

jobs:
  label_issues:
    if: github.event.action == 'opened' || github.event.action == 'reopened'
    runs-on: ubuntu-latest
    steps:
      - name: Attach label to issues
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ["issue", "fix"]
            })

      - name: Comment on new issue
        uses: peter-evans/create-or-update-comment@v1
        with:
          issue-number: ${{ github.event.issue.number }}
          body: |
            🙏 Thanks for opening this issue! We'll take a look as soon as possible.

  issue_closed:
    if: github.event.action == 'closed'
    runs-on: ubuntu-latest
    steps:
      - name: Comment on closed issue
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '✅ The issue is now closed. Thank you!'
            })

  comment_on_first_pr:
    if: github.event.action == 'opened'
    runs-on: ubuntu-latest
    steps:
      - name: Comment on first pull request
        uses: actions/github-script@v6
        with:
          script: |
            const pr_number = context.payload.pull_request.number;
            const author = context.payload.pull_request.user.login;
            const { data: pulls } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'all'
            });

            const userPRs = pulls.filter(pr => pr.user.login === author);
            if (userPRs.length === 1) {
              await github.rest.issues.createComment({
                issue_number: pr_number,   # Ensure PR number is used here
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `🎉 Congratulations @${author} on opening your first pull request! 🚀`
              });
            }
